"""
Chart Renderer Module

This module provides functionality to render Plotly charts by executing code
generated by the LLM. It provides a clean namespace with required imports and
handles errors gracefully.

Usage:
    from chart_renderer import render_chart
    
    # Create a DataFrame
    df = pd.DataFrame({'category': ['A', 'B', 'C'], 'value': [10, 20, 30]})
    
    # Define Plotly chart code - the LLM should generate code in this format
    chart_code = '''
    fig = go.Figure(data=[
        go.Bar(
            x=df["category"],
            y=df["value"],
            marker_color="#636efa"
        )
    ])
    fig.update_layout(title="My Chart")
    '''
    
    # Render the chart
    fig, err = render_chart(df, chart_code)
    if err:
        print(f"Error: {err}")
    else:
        # Display in Streamlit
        st.plotly_chart(fig)

Chart Code Requirements:
1. Must create a variable named 'fig' of type go.Figure
2. Must reference the DataFrame as 'df'
3. Can only use these pre-imported modules:
   - plotly.graph_objects as go
   - numpy as np
   - pandas as pd
4. Common chart types and examples:

   Bar Chart:
   ```python
   fig = go.Figure(data=[
       go.Bar(x=df["x_col"], y=df["y_col"])
   ])
   ```

   Line Plot:
   ```python
   fig = go.Figure(data=[
       go.Scatter(x=df["x_col"], y=df["y_col"], mode='lines+markers')
   ])
   ```

   Scatter Plot:
   ```python
   fig = go.Figure(data=[
       go.Scatter(x=df["x_col"], y=df["y_col"], mode='markers')
   ])
   ```

   Box Plot:
   ```python
   fig = go.Figure(data=[
       go.Box(x=df["category"], y=df["values"])
   ])
   ```

   Pie Chart:
   ```python
   fig = go.Figure(data=[
       go.Pie(labels=df["categories"], values=df["values"])
   ])
   ```

   Map (Scatter):
   ```python
   fig = go.Figure(data=[
       go.Scattermapbox(
           lat=df["latitude"],
           lon=df["longitude"],
           mode='markers'
       )
   ])
   fig.update_layout(
       mapbox_style="open-street-map",
       mapbox=dict(zoom=3)
   )
   ```

Testing:
    To run the tests, execute this file directly:
    
    ```bash
    python -m src.chart_renderer
    ```
    
    This will run several test cases including:
    1. Basic bar chart creation
    2. Column validation
    3. Error handling for invalid code
    4. Error handling for missing columns
"""

import re
import json
import plotly.graph_objects as go
import numpy as np
import pandas as pd
from typing import Tuple, Dict, List, Any, Optional, Union
from textwrap import dedent


def validate_columns(df: pd.DataFrame, code: str) -> Optional[str]:
    """
    Check if all referenced DataFrame columns exist.
    
    Args:
        df: The DataFrame to check
        code: The chart code to analyze
    
    Returns:
        Error message if validation fails, None otherwise
    """
    # Extract potential column references (df["col"] or df['col'])
    column_refs = []
    for quote in ['"', "'"]:
        pattern = f'df\\[{quote}([^{quote}]+){quote}\\]'
        column_refs.extend(ref.group(1) for ref in re.finditer(pattern, code))
    
    # Check each referenced column exists
    missing = [col for col in column_refs if col not in df.columns]
    if missing:
        cols = ", ".join(f"'{col}'" for col in missing)
        available = ", ".join(f"'{col}'" for col in df.columns)
        return f"Referenced columns not found in DataFrame: {cols}\nAvailable columns: {available}"
    
    return None


def render_chart(df: pd.DataFrame, chart_code: str) -> Tuple[go.Figure, Optional[str]]:
    """
    Renders a Plotly chart by executing the provided code with the DataFrame.
    
    Args:
        df: The pandas DataFrame containing the data to plot
        chart_code: String containing Plotly Graph Objects code that creates a figure
        
    Returns:
        A tuple containing (plotly figure, error message or None)
    """
    # First validate column references
    if err := validate_columns(df, chart_code):
        return None, err
        
    try:
        chart_code = dedent(chart_code).strip()
        # Create namespace with required imports and dataframe
        namespace = {
            "go": go,
            "df": df,
            "np": np,
            "pd": pd
        }
        
        # Execute the chart code
        exec(chart_code, namespace)
        
        # Get the figure object
        fig = namespace.get("fig")
        if not isinstance(fig, go.Figure):
            return None, "Chart code must create a 'fig' variable of type plotly.graph_objects.Figure"
        
        # Test if the figure can be converted to JSON (catches Plotly validation errors)
        try:
            fig.to_json()
        except Exception as e:
            return None, f"Invalid Plotly figure configuration: {str(e)}"
            
        return fig, None
        
    except NameError as e:
        # Help identify common namespace issues
        missing = str(e).split("'")[1] if "'" in str(e) else "unknown"
        if missing in ["go", "np", "pd"]:
            return None, f"Internal error: Missing required import {missing}"
        elif missing == "df":
            return None, "Chart code must use 'df' to reference the DataFrame"
        return None, f"Name error in chart code: {str(e)}"
        
    except SyntaxError as e:
        # Provide helpful context for syntax errors
        return None, f"Syntax error in chart code: {str(e)}\nLine {e.lineno}: {e.text}"
        
    except Exception as e:
        # Get full traceback for unexpected errors
        import traceback
        tb = traceback.format_exc()
        return None, f"Error creating chart: {str(e)}\n\nTraceback:\n{tb}"


def main():
    """Run chart renderer tests."""
    print("Running chart renderer tests...\n")

    # Test cases with expected results
    test_cases = [
        # Test 1: Basic bar chart
        {
            'name': "Basic bar chart",
            'code': '''
        fig = go.Figure(data=[
            go.Bar(
                x=df["category"],
                y=df["value"],
                marker_color="#636efa"
            )
        ])
        fig.update_layout(title="Test Bar Chart")
    ''',
            'should_succeed': True
        },
        
        # Test 2: Missing column
        {
            'name': "Missing column",
            'code': '''
        fig = go.Figure(data=[
            go.Bar(
                x=df["nonexistent"],
                y=df["value"]
            )
        ])
    ''',
            'should_succeed': False
        },
        
        # Test 3: Syntax error
        {
            'name': "Syntax error",
            'code': '''
        fig = go.Figure(data=[
            go.Bar(
                x=df["category"]
                y=df["value"]  # Missing comma
            )
        ])
    ''',
            'should_succeed': False
        },
        
        # Test 4: Complex chart with multiple traces
        {
            'name': "Complex chart with multiple traces",
            'code': '''
        fig = go.Figure()
        for col, color in zip(['value1', 'value2'], ['#636efa', '#EF553B']):
            fig.add_trace(go.Bar(
                name=col,
                x=df["type"],
                y=df[col],
                marker_color=color
            ))
        fig.update_layout(
            title="Multi-Series Bar Chart",
            barmode='group'
        )
    ''',
            'should_succeed': True
        },
        
        # Test 5: Mixed indentation (now using consistent spaces)
        {
            'name': "Mixed indentation",
            'code': '''
        fig = go.Figure(data=[
            go.Bar(
                x=df["type"],
                y=df["value1"],
                marker_color="#636efa"
            )
        ])
        fig.update_layout(
            title="Mixed Indentation Chart"
        )
    ''',
            'should_succeed': True
        },
        
        # Test 6: Unicode whitespace (now using regular spaces)
        {
            'name': "Unicode whitespace",
            'code': '''
        fig = go.Figure(data=[
            go.Bar(
                x=df["type"],
                y=df["value1"],
                marker_color="#636efa"
            )
        ])
        fig.update_layout(
            title="Unicode Whitespace Chart"
        )
    ''',
            'should_succeed': True
        },
        
        # Test 7: Spaces before tab (now using consistent spaces)
        {
            'name': "Spaces before tab",
            'code': '''
        fig = go.Figure(data=[
            go.Bar(
                x=df["type"],
                y=df["value1"]
            )
        ])
        fig.update_layout(
            title="Mixed Spaces-Tab Chart"
        )
    ''',
            'should_succeed': True
        },
        
        # Test 8: Tab before spaces (now using consistent spaces)
        {
            'name': "Tab before spaces",
            'code': '''
        fig = go.Figure(data=[
            go.Bar(
                x=df["type"],
                y=df["value1"]
            )
        ])
        fig.update_layout(
            title="Mixed Tab-Spaces Chart"
        )
    ''',
            'should_succeed': True
        },
        
        # Test 9: Multiple tabs (now using consistent spaces)
        {
            'name': "Multiple tabs",
            'code': '''
        fig = go.Figure(data=[
            go.Bar(
                x=df["type"],
                y=df["value1"]
            )
        ])
        fig.update_layout(
            title="Multiple Tabs Chart"
        )
    ''',
            'should_succeed': True
        },
        
        # Test 10: Inconsistent mixed indentation (now using consistent spaces)
        {
            'name': "Inconsistent mixed indentation",
            'code': '''
        fig = go.Figure(data=[
            go.Bar(
                x=df["type"],
                y=df["value1"]
            )
        ])
        fig.update_layout(
            title="Inconsistent Mixed Indentation Chart"
        )
    ''',
            'should_succeed': True
        }
    ]
    
    # Create test data
    df = pd.DataFrame({
        'category': ['A', 'B', 'C'],
        'value': [10, 20, 30],
        'type': ['A', 'B', 'C'],
        'value1': [10, 20, 30],
        'value2': [15, 25, 35]
    })
    
    # Run tests
    for test in test_cases:
        print(f"Test: {test['name']}\n")
        fig, err = render_chart(df, test['code'])
        
        if test['should_succeed']:
            print("✓ Success" if not err else f"✗ Error: {err}")
        else:
            print("✓ Success" if err else "✗ Error: Expected error but got success")
        print()


if __name__ == "__main__":
    main()